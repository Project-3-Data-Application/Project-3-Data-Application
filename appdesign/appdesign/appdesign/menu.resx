<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAV4AAAGQCAMAAADRF/jsAAAABGdBTUEAALGPC/xhBQAAAwBQTFRFAH8O
        AoAPA4AQBIERBYESBoITB4IUCIMVCYMWCoQXC4QYDIUZDYUaDoYbD4YcEIcdEYceEogfFIkgFYkhFooi
        F4ojGIskGYslGowmG4wnHI0oHY0pHo4qH44rII8sIY8tIpAuI5AvJJEwJpIxJ5IyKJMzKZM0KpQ1K5Q2
        LJU3LZU4LpY5L5Y6MJc7MZc8Mpg9M5g+NJk/NZlANppBOJtCOZtDOpxEO5xFPJ1GPZ1HPp5IP55JQJ9K
        QZ9LQqBMQ6BNRKFORaFPRqJQR6JRSKNSSqRTTKVVTaVWTqZXT6ZYUKdZUadaUqhbU6hcVKldValeVqpf
        V6pgWKthWatiWqxjW6xkXK1kXa1lX65nYK9oYa9pYrBqY7BrZLFsZbFtZrJuZ7JvaLNwabNxarRya7Rz
        bLV0bbV1brZ1b7Z2cLd3cbd4crh5c7h6dLl7dbl8drp9d7p+eLt/ebuAeryBe7yCfL2Dfb2Efr6Ff76G
        gL+Ggb+HgsCIg8CJhMGKhcGLhsKMh8KNiMOOicOPisSQi8SRjMWSjcWTjsaUj8aVkMeWkceXksiXk8iY
        lMmZlcmalsqbl8qcmMudmcuemsyfm8ygnM2hnc2in86koM+loc+motCno9CopNGopdGpptKqp9KrqNOs
        qdOtqtSurNWwrdWxrtayr9azsNe0sde1sti2tNm4ttq6udu8uty9u9y+vN2/vd3Avt7Bv97CwN/Dwd/E
        wuDFw+DGxOHHxeHIxuLJx+LKyOPLyuTMy+TNzOXOzeXPzubQz+bR0OfS0efT0ujU0+jV1OnW1enX1urY
        1+rZ2Ova2evb2uzc3e3e3u7f3+7g4O/h4e/i4vDj4/Dk5PHl5fHm5vLn5/Lo6PPp6fPq6vTr6/Ts7fXt
        7vbu7/bv8Pfw8ffx8vjy8/jz9Pn09fn19vr29/r3+Pv4+fv5+vz6+/z7/P38/f39/v7+////AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3TobMAAAAAlwSFlzAAAO
        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
        It6giDco4g2KeIMi3qCINyjiDYp4gyLeoIg3KOINiniDIt6giDco4g2KeIMi3qCINyjiDYp4gyLeoIg3
        KOINiniDIt6giDco4g2KeIMi3qCINyjiDUop1f2iROL+J5NLNsomNB7/3/9HOhUnEhPKk8nKXfJl7B/J
        dW/ti0sSo2eapKvkmWgACbN23Xub8lGeXLJOvgn1JQHWW3vKx76Q1BqkuK8pHxXJ1ZSPGklS+6urKR9T
        KB97kXgakS0f4235qJZdNGeSSSBFpnxMq0gu2SJ7a3Ykh/C69EokJto3tey4eZCTb1KufMwySW+Xgyhc
        csZZU+ArcjnLXFCIK3I5tRxTMCtyOZ8cZlfkeTullnPID6nykTdTajnw/JMfK3I52LzW1Uypc7R8yBEW
        ilxbkcthFSK3IjdT6myuyOVQClzWVuSy/+ajaVfkstPmyazIR4ddkcuOmr1AK3J5dcQac0UuL4nM9veX
        XPIyqJMtH/s8pZbvxb5ob1fk08yKvM4ptXwDGipakWeeUsuT0AgyrMjlK2hkRWZKbVbkMgIAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABQf0r9H5WiL57W3HSwAAAAAElFTkSuQmCC
</value>
  </data>
</root>